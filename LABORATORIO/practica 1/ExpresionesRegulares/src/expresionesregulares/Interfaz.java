/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package expresionesregulares;

import java.io.BufferedReader;
import java.io.StringReader;
import analizador.AnalizadorLexico;
import analizador.analisis_sintactico;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.LinkedList;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import objetos.Conjunto;
import objetos.Nodo;
import objetos.Nhojas;
import objetos.ExpresionRegular;

/**
 *
 * @author KUINN
 */
public class Interfaz extends javax.swing.JFrame {

    /**
     * Creates new form Interfaz
     */
    JFileChooser selectorArchivos = new JFileChooser();
    FileReader fr = null;
    BufferedReader bfr = null;
    File archivo = null;
    BufferedWriter bw;
    String guardar = "";
    int contador = 0;
    LinkedList<ExpresionRegular> ER = analisis_sintactico.miER;
    ImageIcon imgMostrar[];
    private static LinkedList<Nhojas> sinHijos;

    public Interfaz() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelEntrada = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtEntrada = new javax.swing.JTextArea();
        btnGenerarAutomata = new javax.swing.JButton();
        btnAnalizar = new javax.swing.JButton();
        panelImagenes = new javax.swing.JPanel();
        lblImg = new javax.swing.JLabel();
        panelConsola = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtConsola = new javax.swing.JTextArea();
        btnAnterior = new javax.swing.JButton();
        btnSiguiente = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuAbrir = new javax.swing.JMenu();
        btnNuevo = new javax.swing.JMenuItem();
        btnAbrir = new javax.swing.JMenuItem();
        menuGuardar = new javax.swing.JMenuItem();
        menuGuardarComo = new javax.swing.JMenuItem();
        menuGenerarXML = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        menuArboles = new javax.swing.JMenuItem();
        menuSiguientes = new javax.swing.JMenuItem();
        menuTransiciones = new javax.swing.JMenuItem();
        menuAutomatas = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtEntrada.setColumns(20);
        txtEntrada.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        txtEntrada.setRows(5);
        jScrollPane1.setViewportView(txtEntrada);

        btnGenerarAutomata.setText("generar automata");

        btnAnalizar.setText("analizar entrada");
        btnAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelEntradaLayout = new javax.swing.GroupLayout(panelEntrada);
        panelEntrada.setLayout(panelEntradaLayout);
        panelEntradaLayout.setHorizontalGroup(
            panelEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelEntradaLayout.createSequentialGroup()
                .addGroup(panelEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(panelEntradaLayout.createSequentialGroup()
                        .addContainerGap(11, Short.MAX_VALUE)
                        .addComponent(btnGenerarAutomata, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAnalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        panelEntradaLayout.setVerticalGroup(
            panelEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEntradaLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 461, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelEntradaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAnalizar, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                    .addComponent(btnGenerarAutomata, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        panelImagenes.setBorder(new javax.swing.border.MatteBorder(null));

        lblImg.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        lblImg.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout panelImagenesLayout = new javax.swing.GroupLayout(panelImagenes);
        panelImagenes.setLayout(panelImagenesLayout);
        panelImagenesLayout.setHorizontalGroup(
            panelImagenesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblImg, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 620, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        panelImagenesLayout.setVerticalGroup(
            panelImagenesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblImg, javax.swing.GroupLayout.DEFAULT_SIZE, 728, Short.MAX_VALUE)
        );

        txtConsola.setColumns(20);
        txtConsola.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        txtConsola.setRows(5);
        jScrollPane2.setViewportView(txtConsola);

        javax.swing.GroupLayout panelConsolaLayout = new javax.swing.GroupLayout(panelConsola);
        panelConsola.setLayout(panelConsolaLayout);
        panelConsolaLayout.setHorizontalGroup(
            panelConsolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelConsolaLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 657, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        panelConsolaLayout.setVerticalGroup(
            panelConsolaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
        );

        btnAnterior.setIcon(new javax.swing.ImageIcon(getClass().getResource("/expresionesregulares/anterior.png"))); // NOI18N
        btnAnterior.setText("anterior");
        btnAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnteriorActionPerformed(evt);
            }
        });

        btnSiguiente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/expresionesregulares/siguiente.png"))); // NOI18N
        btnSiguiente.setText("siguiente");
        btnSiguiente.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSiguienteActionPerformed(evt);
            }
        });

        menuAbrir.setText("archivo");

        btnNuevo.setText("nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        menuAbrir.add(btnNuevo);

        btnAbrir.setText("abrir");
        btnAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirActionPerformed(evt);
            }
        });
        menuAbrir.add(btnAbrir);

        menuGuardar.setText("guardar");
        menuGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGuardarActionPerformed(evt);
            }
        });
        menuAbrir.add(menuGuardar);

        menuGuardarComo.setText("guardar como");
        menuGuardarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGuardarComoActionPerformed(evt);
            }
        });
        menuAbrir.add(menuGuardarComo);

        menuGenerarXML.setText("generar XML de salida");
        menuAbrir.add(menuGenerarXML);

        jMenuBar1.add(menuAbrir);

        jMenu2.setText("ver imagenes");

        menuArboles.setText("arboles");
        menuArboles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuArbolesActionPerformed(evt);
            }
        });
        jMenu2.add(menuArboles);

        menuSiguientes.setText("siguientes");
        menuSiguientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSiguientesActionPerformed(evt);
            }
        });
        jMenu2.add(menuSiguientes);

        menuTransiciones.setText("transiciones");
        jMenu2.add(menuTransiciones);

        menuAutomatas.setText("automatas");
        jMenu2.add(menuAutomatas);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(701, 701, 701)
                        .addComponent(btnAnterior, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSiguiente, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(panelConsola, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panelEntrada, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(panelImagenes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(19, 19, 19))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelImagenes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSiguiente)
                            .addComponent(btnAnterior))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(panelEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(panelConsola, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuArbolesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuArbolesActionPerformed
        imgMostrar = new ImageIcon[ER.size()];
        for (int i = 0; i < imgMostrar.length; i++) {
            imgMostrar[i] = new ImageIcon(getClass().getResource("/arboles/arbol" + i + ".png"));
        }
        lblImg.setIcon(imgMostrar[0]);
    }//GEN-LAST:event_menuArbolesActionPerformed

    private void btnAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarActionPerformed
        try {
            this.limpiar_memoria();
            this.analizar();
        } catch (Exception e) {
        }

    }//GEN-LAST:event_btnAnalizarActionPerformed

    private void btnSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSiguienteActionPerformed
        contador++;
        if (contador == imgMostrar.length) {
            contador = 0;
        }
        lblImg.setIcon(imgMostrar[contador]);
    }//GEN-LAST:event_btnSiguienteActionPerformed

    private void btnAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnteriorActionPerformed
        if (contador == 0) {
            contador = imgMostrar.length;
        }
        contador--;
        lblImg.setIcon(imgMostrar[contador]);
    }//GEN-LAST:event_btnAnteriorActionPerformed

    private void btnAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirActionPerformed
        this.abrir_archivo();
    }//GEN-LAST:event_btnAbrirActionPerformed

    private void menuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGuardarActionPerformed
        this.guardar_archivo();
    }//GEN-LAST:event_menuGuardarActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        this.nuevo_archivo();
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void menuGuardarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGuardarComoActionPerformed
        this.nuevo_archivo();
        this.guardar_archivo();
    }//GEN-LAST:event_menuGuardarComoActionPerformed

    private void menuSiguientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSiguientesActionPerformed
        imgMostrar = new ImageIcon[sinHijos.size()];
        for (int i = 0; i < imgMostrar.length; i++) {
            imgMostrar[i] = new ImageIcon(getClass().getResource("/siguientes/tabNext" + i + ".png"));
        }
        lblImg.setIcon(imgMostrar[0]);
    }//GEN-LAST:event_menuSiguientesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem btnAbrir;
    private javax.swing.JButton btnAnalizar;
    private javax.swing.JButton btnAnterior;
    private javax.swing.JButton btnGenerarAutomata;
    private javax.swing.JMenuItem btnNuevo;
    private javax.swing.JButton btnSiguiente;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblImg;
    private javax.swing.JMenu menuAbrir;
    private javax.swing.JMenuItem menuArboles;
    private javax.swing.JMenuItem menuAutomatas;
    private javax.swing.JMenuItem menuGenerarXML;
    private javax.swing.JMenuItem menuGuardar;
    private javax.swing.JMenuItem menuGuardarComo;
    private javax.swing.JMenuItem menuSiguientes;
    private javax.swing.JMenuItem menuTransiciones;
    private javax.swing.JPanel panelConsola;
    private javax.swing.JPanel panelEntrada;
    private javax.swing.JPanel panelImagenes;
    private javax.swing.JTextArea txtConsola;
    private javax.swing.JTextArea txtEntrada;
    // End of variables declaration//GEN-END:variables

    public void analizar() throws Exception {
        String input = this.txtEntrada.getText();
        AnalizadorLexico lexico = new AnalizadorLexico(new BufferedReader(new StringReader(input)));
        analisis_sintactico sin = new analisis_sintactico(lexico);
        sin.parse();
        this.mostrarSalida(sin.salida);
        misER();
    }

    public void mostrarSalida(String salida) {
        LinkedList<Conjunto> conj = analisis_sintactico.miConjunto;
        String salida2 = analisis_sintactico.errorSin;
        String conSAlida = "";
        if (salida != null || salida2 != "") {
            conSAlida = salida + "\n\n";
            conSAlida = salida2;
        } else {
            for (int i = 0; i < conj.size(); i++) {
                conSAlida += conj.get(i).getIdentificador() + " = " + conj.get(i).getMiConjunto() + "\n";
            }
        }
        txtConsola.setText(conSAlida);
    }

    private void limpiar_memoria() {
        analisis_sintactico.miConjunto.clear();
        analisis_sintactico.errorSin = "";
        analisis_sintactico.miER.clear();

    }

    public static void Graficar(String cadena, String id, String nombre, String dir) {
        FileWriter fichero;
        File f;
        PrintWriter pw;
        String dirArchivo = dir + nombre;
        String archivo = dirArchivo + ".dot";
        try {
            f = new File(archivo);
            fichero = new FileWriter(f);
            pw = new PrintWriter(fichero);
            pw.println("digraph G { \n");
            pw.println(cadena);
            pw.println("label =" + "\"\n\n nombre: " + id + "\" ;" + "\n fontsize=20;");
            pw.println("\n }");
            fichero.close();
        } catch (Exception e) {
            System.out.println(e + "  crea archivo dot");
        }
        try {
            String cmd = "dot.exe -Tpng " + dirArchivo + ".dot -o " + dirArchivo + ".png";
            Runtime.getRuntime().exec(cmd);
        } catch (Exception e) {
            System.out.println(e + " crea archivo png");
        }
    }

    public static String recorrido(Nodo arbol) {
        String cuerpo = "";
        for (Nodo hijos : arbol.hijos) {
            if (!(hijos.raiz).equals("")) {
                cuerpo += "\"" + arbol.idN + "\n anulable: " + arbol.anulables + "\n primeros: " + arbol.primeros + "\n ultimos: " + arbol.ultimos + "\n" + arbol.raiz + "\"" + "->" + "\"" + hijos.idN + "\n anulable: " + hijos.anulables + "\n primeros: " + hijos.primeros + "\n ultimos: " + hijos.ultimos + "\n" + hijos.raiz + "\" \n";
                cuerpo += recorrido(hijos);
            }
        }
        return cuerpo;
    }

    private static void crear_tabla_siguiente(Nodo padre) {
        int cont = 0;
        for (Nodo hijos : padre.hijos) {
            cont++;
            if (!(hijos.raiz).equals("")) {
                if (cont == 1) {
                    switch (padre.raiz) {
                        case ".":
                            Nodo hijoIz = padre.hijos.get(0);
                            Nodo hijoDer = padre.hijos.get(1);
                            String[] ultPosC1 = miSplit(hijoIz.ultimos);
                            for (int i = 0; i < sinHijos.size(); i++) {
                                for (int j = 0; j < ultPosC1.length; j++) {
                                    if (sinHijos.get(i).getId().equals(ultPosC1[j])) {
                                        String siguiente = "";
                                        if (sinHijos.get(i).getSig().equals("")) {
                                            siguiente = hijoDer.primeros;
                                        } else {
                                            siguiente = hijoDer.primeros + "," + sinHijos.get(i).getSig();
                                        }
                                        sinHijos.get(i).setSig(siguiente);
                                    }
                                }
                            }

                            break;
                        case "*":
                            String[] ultPosC11 = miSplit(padre.ultimos);
                            for (int i = 0; i < ultPosC11.length; i++) {
                                for (int j = 0; j < sinHijos.size(); j++) {
                                    if (sinHijos.get(j).getId().equals(ultPosC11[i])) {
                                String siguiente = padre.primeros + "," + sinHijos.get(j).getSig();
                                        sinHijos.get(j).setSig(siguiente);
                                    }
                                }
                            }
                            break;
                        case "+":
                            String[] ultPosC111 = miSplit(padre.ultimos);
                            for (int i = 0; i < ultPosC111.length; i++) {
                                for (int j = 0; j < sinHijos.size(); j++) {
                                    if (sinHijos.get(j).getId().equals(ultPosC111[i])) {
                                String siguiente = padre.primeros + "," + sinHijos.get(j).getSig();
                                        sinHijos.get(j).setSig(siguiente);
                                    }
                                }
                            }
                            break;
                    }
                }
                crear_tabla_siguiente(hijos);
            }
        }
    }

    private static String[] miSplit(String cadena) {
        String[] caracter = cadena.split(", ");
        return caracter;
    }

    private void misER() {
        //Nodo arbol = analisis_sintactico.padre;
        //Graficar(recorrido(arbol), "AST_PROYECTO");
        for (int i = 0; i < ER.size(); i++) {
            String id = ER.get(i).getId();
            String nombre = "arbol" + i;
            Nodo arbol = ER.get(i).getMiNodo();
            sinHijos = ER.get(i).getHojas();
            String dir = "C:\\Users\\KUINN\\Documents\\NetBeansProjects\\ExpresionesRegulares\\src\\arboles\\";
            Graficar(recorrido(arbol), id, nombre, dir);
            crear_tabla_siguiente(arbol);
            String numeroTabla = "" + i;
            generar_tabla_siguiente(sinHijos, id, numeroTabla);
        }
    }

    private void generar_tabla_siguiente(LinkedList<Nhojas> tablaNext, String id, String numero) {
        String cadena = "tbl [ \n shape=plaintext \n label=< \n <table border='0' cellborder='1'  cellspacing='0'> \n";
        cadena += "<tr><td>" + "Hoja" + "</td><td>" + "identificador" + "</td><td>" + "Siguientes" + "</td></tr> \n";
        for (int i = 0; i < tablaNext.size(); i++) {
            cadena += "<tr><td>" + tablaNext.get(i).getValor() + "</td><td>" + tablaNext.get(i).getId() + "</td><td>" + tablaNext.get(i).getSig() + "</td></tr> \n";
        }
        cadena += "</table> \n >];";
        String nombre = "tabNext" + numero;
        String dir = "C:\\Users\\KUINN\\Documents\\NetBeansProjects\\ExpresionesRegulares\\src\\siguientes\\";
        Graficar(cadena, id, nombre, dir);
    }

    private void abrir_archivo() {
        selectorArchivos.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("der", "der");
        selectorArchivos.setFileFilter(filter);
        // indica cual fue la accion de usuario sobre el jfilechooser
        int resultado = selectorArchivos.showOpenDialog(this);

        File archivoSe = selectorArchivos.getSelectedFile(); // obtiene el archivo seleccionado

        try {
            String uweb = new String();
            String path = archivoSe.getAbsolutePath();  //obtiene la direccion del archivo
            guardar = path;
            archivo = new File(path);

            try {
                fr = new FileReader(path);
                bfr = new BufferedReader(fr);
                while (bfr.ready()) {
                    uweb += bfr.readLine() + "\n";
                }
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                try {
                    if (null != fr) {
                        fr.close();
                        this.txtEntrada.setText(uweb);
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        } catch (Exception exp) {
            exp.printStackTrace();
        }

    }

    private void guardar_archivo() {
        //se crea una variable tipo File
        archivo = new File(guardar); //se inicializa la variable con el valor del metodo 

        try {
            FileWriter w = new FileWriter(archivo); //se inicializa la una variable de escritura de archivo
            BufferedWriter bw = new BufferedWriter(w);
            PrintWriter wr = new PrintWriter(bw);

            //Con nuestro PrintWriter ingresamos el texto que deseamos escribir
            wr.write(txtEntrada.getText());
            wr.close();
            bw.close();
        } catch (IOException e) {
            //JOptionPane.showMessageDialog(this, "error al guardar", "message", JOptionPane.ERROR_MESSAGE);
            int input = JOptionPane.showConfirmDialog(this,
                    "El archivo no se a creado, desea crear archivo!!", "Message",
                    JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
            if (input == 0) {
                this.nuevo_archivo();
            }
            // 0=ok, 2=cancel
        }
    }

    public void nuevo_archivo() {
        selectorArchivos.showSaveDialog(null);
        File archivoSe = selectorArchivos.getSelectedFile();

        if (archivoSe != null) {
            String path = archivoSe + ".der"; //path del archivo a guardar]
            archivo = new File(path);
            if (archivo.exists()) {
                JOptionPane.showMessageDialog(this, "ya existe el archivo", "message", JOptionPane.ERROR_MESSAGE);
            } else {
                try {
                    bw = new BufferedWriter(new FileWriter(archivo));
                    //txtEntrada.setText("");
                    JOptionPane.showMessageDialog(this, "Archivo creado con exito", "message", JOptionPane.INFORMATION_MESSAGE);
                    guardar = path;
                } catch (Exception e) {
                }
            }
        }

    }

}
