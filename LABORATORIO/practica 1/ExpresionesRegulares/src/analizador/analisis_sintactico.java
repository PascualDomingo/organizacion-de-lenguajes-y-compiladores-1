
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizador;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.Hashtable;
import objetos.ExpresionRegular;
import objetos.Conjunto;
import objetos.Nodo;
import objetos.Nhojas;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class analisis_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public analisis_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public analisis_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public analisis_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\004\000\002\002\003\000\002\020" +
    "\005\000\002\003\005\000\002\005\004\000\002\005\003" +
    "\000\002\011\004\000\002\011\003\000\002\016\004\000" +
    "\002\016\003\000\002\010\003\000\002\010\003\000\002" +
    "\014\006\000\002\014\003\000\002\004\010\000\002\007" +
    "\006\000\002\013\004\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\017\005\000" +
    "\002\017\005\000\002\017\004\000\002\017\004\000\002" +
    "\017\004\000\002\017\005\000\002\017\005\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\076\000\004\054\005\001\002\000\004\002\000\001" +
    "\002\000\006\004\014\013\015\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\010\004\ufff7\006" +
    "\ufff7\013\ufff7\001\002\000\010\004\ufffa\006\ufffa\013\ufffa" +
    "\001\002\000\010\004\014\006\061\013\015\001\002\000" +
    "\010\004\ufff6\006\ufff6\013\ufff6\001\002\000\004\037\054" +
    "\001\002\000\004\005\020\001\002\000\004\055\017\001" +
    "\002\000\004\002\uffff\001\002\000\036\007\031\010\025" +
    "\011\032\012\026\013\024\015\021\017\033\031\034\032" +
    "\037\035\027\044\023\046\036\054\035\056\022\001\002" +
    "\000\044\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\015" +
    "\uffe1\017\uffe1\031\uffe1\032\uffe1\035\uffe1\040\uffe1\044\uffe1" +
    "\046\uffe1\047\uffe1\054\uffe1\055\uffe1\056\uffe1\001\002\000" +
    "\036\007\031\010\025\011\032\012\026\013\024\015\021" +
    "\017\033\031\034\032\037\035\027\044\023\046\036\054" +
    "\035\056\022\001\002\000\036\007\031\010\025\011\032" +
    "\012\026\013\024\015\021\017\033\031\034\032\037\035" +
    "\027\044\023\046\036\054\035\056\022\001\002\000\044" +
    "\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\015\uffe0\017" +
    "\uffe0\031\uffe0\032\uffe0\035\uffe0\040\uffe0\044\uffe0\046\uffe0" +
    "\047\uffe0\054\uffe0\055\uffe0\056\uffe0\001\002\000\044\007" +
    "\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\015\uffe4\017\uffe4" +
    "\031\uffe4\032\uffe4\035\uffe4\040\uffe4\044\uffe4\046\uffe4\047" +
    "\uffe4\054\uffe4\055\uffe4\056\uffe4\001\002\000\044\007\uffe2" +
    "\010\uffe2\011\uffe2\012\uffe2\013\uffe2\015\uffe2\017\uffe2\031" +
    "\uffe2\032\uffe2\035\uffe2\040\uffe2\044\uffe2\046\uffe2\047\uffe2" +
    "\054\uffe2\055\uffe2\056\uffe2\001\002\000\036\007\031\010" +
    "\025\011\032\012\026\013\024\015\021\017\033\031\034" +
    "\032\037\035\027\044\023\046\036\054\035\056\022\001" +
    "\002\000\004\040\046\001\002\000\044\007\uffe5\010\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\015\uffe5\017\uffe5\031\uffe5\032" +
    "\uffe5\035\uffe5\040\uffe5\044\uffe5\046\uffe5\047\uffe5\054\uffe5" +
    "\055\uffe5\056\uffe5\001\002\000\044\007\uffe3\010\uffe3\011" +
    "\uffe3\012\uffe3\013\uffe3\015\uffe3\017\uffe3\031\uffe3\032\uffe3" +
    "\035\uffe3\040\uffe3\044\uffe3\046\uffe3\047\uffe3\054\uffe3\055" +
    "\uffe3\056\uffe3\001\002\000\044\007\uffdf\010\uffdf\011\uffdf" +
    "\012\uffdf\013\uffdf\015\uffdf\017\uffdf\031\uffdf\032\uffdf\035" +
    "\uffdf\040\uffdf\044\uffdf\046\uffdf\047\uffdf\054\uffdf\055\uffdf" +
    "\056\uffdf\001\002\000\036\007\031\010\025\011\032\012" +
    "\026\013\024\015\021\017\033\031\034\032\037\035\027" +
    "\044\023\046\036\054\035\056\022\001\002\000\036\007" +
    "\031\010\025\011\032\012\026\013\024\015\021\017\033" +
    "\031\034\032\037\035\027\044\023\046\036\054\035\056" +
    "\022\001\002\000\036\007\031\010\025\011\032\012\026" +
    "\013\024\015\021\017\033\031\034\032\037\035\027\044" +
    "\023\046\036\054\035\056\022\001\002\000\036\007\031" +
    "\010\025\011\032\012\026\013\024\015\021\017\033\031" +
    "\034\032\037\035\027\044\023\046\036\054\035\056\022" +
    "\001\002\000\044\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013" +
    "\uffe9\015\uffe9\017\uffe9\031\uffe9\032\uffe9\035\uffe9\040\uffe9" +
    "\044\uffe9\046\uffe9\047\uffe9\054\uffe9\055\uffe9\056\uffe9\001" +
    "\002\000\004\047\042\001\002\000\044\007\uffe6\010\uffe6" +
    "\011\uffe6\012\uffe6\013\uffe6\015\uffe6\017\uffe6\031\uffe6\032" +
    "\uffe6\035\uffe6\040\uffe6\044\uffe6\046\uffe6\047\uffe6\054\uffe6" +
    "\055\uffe6\056\uffe6\001\002\000\004\055\044\001\002\000" +
    "\044\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\015\uffe7" +
    "\017\uffe7\031\uffe7\032\uffe7\035\uffe7\040\uffe7\044\uffe7\046" +
    "\uffe7\047\uffe7\054\uffe7\055\uffe7\056\uffe7\001\002\000\044" +
    "\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\015\uffea\017" +
    "\uffea\031\uffea\032\uffea\035\uffea\040\uffea\044\uffea\046\uffea" +
    "\047\uffea\054\uffea\055\uffea\056\uffea\001\002\000\010\004" +
    "\ufff2\006\ufff2\013\ufff2\001\002\000\036\007\031\010\025" +
    "\011\032\012\026\013\024\015\021\017\033\031\034\032" +
    "\037\035\027\044\023\046\036\054\035\056\022\001\002" +
    "\000\044\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\015" +
    "\uffec\017\uffec\031\uffec\032\uffec\035\uffec\040\uffec\044\uffec" +
    "\046\uffec\047\uffec\054\uffec\055\uffec\056\uffec\001\002\000" +
    "\044\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\015\uffe8" +
    "\017\uffe8\031\uffe8\032\uffe8\035\uffe8\040\uffe8\044\uffe8\046" +
    "\uffe8\047\uffe8\054\uffe8\055\uffe8\056\uffe8\001\002\000\036" +
    "\007\031\010\025\011\032\012\026\013\024\015\021\017" +
    "\033\031\034\032\037\035\027\044\023\046\036\054\035" +
    "\056\022\001\002\000\044\007\uffeb\010\uffeb\011\uffeb\012" +
    "\uffeb\013\uffeb\015\uffeb\017\uffeb\031\uffeb\032\uffeb\035\uffeb" +
    "\040\uffeb\044\uffeb\046\uffeb\047\uffeb\054\uffeb\055\uffeb\056" +
    "\uffeb\001\002\000\004\013\055\001\002\000\004\005\056" +
    "\001\002\000\004\016\057\001\002\000\004\040\060\001" +
    "\002\000\012\004\ufff3\006\ufff3\013\ufff3\055\ufff3\001\002" +
    "\000\004\006\100\001\002\000\010\004\ufffb\006\ufffb\013" +
    "\ufffb\001\002\000\006\004\014\013\066\001\002\000\010" +
    "\004\ufff8\013\ufff8\055\ufff8\001\002\000\010\004\014\013" +
    "\066\055\ufffe\001\002\000\004\037\070\001\002\000\010" +
    "\004\ufff4\013\ufff4\055\ufff4\001\002\000\012\011\072\012" +
    "\071\013\075\017\073\001\002\000\004\040\uffee\001\002" +
    "\000\004\040\uffef\001\002\000\004\040\ufff0\001\002\000" +
    "\004\040\076\001\002\000\004\040\uffed\001\002\000\010" +
    "\004\ufff5\013\ufff5\055\ufff5\001\002\000\010\004\ufff9\013" +
    "\ufff9\055\ufff9\001\002\000\006\004\ufff1\013\ufff1\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\076\000\006\002\005\020\003\001\001\000\002\001" +
    "\001\000\014\003\015\004\012\007\007\010\010\011\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\012\007\007\010\061" +
    "\013\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\027\001\001\000\002\001\001\000\004\017\051\001" +
    "\001\000\004\017\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\044\001\001\000\004\017\042\001" +
    "\001\000\004\017\040\001\001\000\004\017\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\066\014\063\016\064\001\001\000" +
    "\002\001\001\000\006\004\066\014\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$analisis_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$analisis_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$analisis_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static LinkedList<Conjunto> miConjunto = new LinkedList<>();
    public static LinkedList<ExpresionRegular> miER = new LinkedList<>();
    private ArrayList<String> anulab = new ArrayList<>();
    public static LinkedList<Nhojas> nhojas = new LinkedList<Nhojas>();

    public static Nodo padre;
    public int cont = 1;
    public String salida = "" ; // Aquí guardaremos nuestra resultado.
    public static String errorSin = "";
    public String DescripcinError = "El analizador se recupero tras el error\nError en la Línea";
    public void syntax_error(Symbol s){
        System.err.println("El analizador se recupero tras el error\nError en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido." );
    }


/**Metodo al que se llama en el momento en que ya no es posible una recuperación de
errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String error = "El analizador No se recupero, ERROR";
       // TErrorSintactico datos = new TErrorSintactico(error, fila, columna, identi);
        //tbErrorSintactico.add(datos);
        setSalida(error);
    }

    public void setSalida(String cadena) // Metodo que guarda nuestro resultado salida
    {
        salida = cadena;
    }

    /***********    si el conjunto ya fue declarado    ************/
    private Boolean existe_conj(String a){
        Boolean flag = false;
        for(int i = 0; i<miConjunto.size(); i++){
            if(miConjunto.get(i).getIdentificador().equals(a)){
                flag = true;
                break;
            }
        }
        return flag;
    }
// String FaleName = cadena.replaceAll("\"", ""); //elimina comillas al string antes ""id"" ahora "id"

    /******************        es para ver si es anulable o no      ***********/
    private String AN(Nodo c1, Nodo c2, String op){
        String retornar = "N";
        switch(op){
            case ".":
                if(c1.anulables == "A" && c2.anulables == "A"){
                    retornar = "A";
                }
                break;
            case "|":
                if(!(c1.anulables == "N" && c2.anulables == "N")){
                    retornar = "A";
                }
                break;
        }
        return retornar;
    }

    /***************    determinar primeros y ultimos     **********/
        private String prim_ult(Nodo c1, Nodo c2, String op, String prim_ultimo){
        String retornar = "";
        String primero = "";
        String ultimo = "";
        switch(op){
            case "|":
                primero = c1.primeros + ", " + c2.primeros;
                ultimo = c1.ultimos + ", " + c2.ultimos;
                break;
            case ".":
                if(c1.anulables == "A"){
                    primero = c1.primeros + ", " + c2.primeros;
                }else{
                    primero = c1.primeros;
                }
                if(c2.anulables == "A"){
                    ultimo = c1.ultimos + ", " + c2.ultimos;
                }else{
                    ultimo = c2.ultimos;
                }
                break;
        }
        
        if(prim_ultimo.equals("primero")){
            retornar = primero;
            
        }else{/*ultimo*/
            retornar = ultimo;
        }
        return retornar;
    }


    /*******************  FIN DE ESTE BLOQUE   *************************/
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$analisis_sintactico$actions {
  private final analisis_sintactico parser;

  /** Constructor */
  CUP$analisis_sintactico$actions(analisis_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action_part00000000(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analisis_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$analisis_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$analisis_sintactico$parser.done_parsing();
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INTERPRETE 
            {
              String RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 setSalida(valor); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INTERPRETE ::= Allav CUERPO Cllav 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INTERPRETE",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPO ::= L_ER SIM_SEPARACION L_LEXEMA 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // L_CONJUNTO ::= L_CONJUNTO CONJUNTO 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("L_CONJUNTO",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // L_CONJUNTO ::= CONJUNTO 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("L_CONJUNTO",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // L_ER ::= L_ER BLOQ_ER 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("L_ER",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // L_ER ::= BLOQ_ER 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("L_ER",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // L_LEXEMA ::= L_LEXEMA BLOQ_LEX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("L_LEXEMA",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // L_LEXEMA ::= BLOQ_LEX 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("L_LEXEMA",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BLOQ_ER ::= ER 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQ_ER",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BLOQ_ER ::= CONJUNTO 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQ_ER",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BLOQ_LEX ::= id dosp LEXEMA pyc 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQ_LEX",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BLOQ_LEX ::= CONJUNTO 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BLOQ_LEX",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONJUNTO ::= conj dosp id flecha conjunto pyc 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		  miConjunto.add(new Conjunto(a, b)); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CONJUNTO",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ER ::= id flecha PREO pyc 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		
                                
                                Nodo nd = new Nodo();
                                Nodo nd1 = new Nodo();
                                nd1.setRaiz("#");
                                nd1.setAnulables("N");
                                nd1.setIdN(parser.cont+1);
                                nd1.setPrimeros(""+(parser.cont+1));
                                nd1.setUltimos(""+(parser.cont+1));
                                nhojas.add(new Nhojas("#", ""+(parser.cont+1), "-----"));

                                nd.setRaiz(".");
                                nd.setAnulables("N");
                                nd.setIdN(parser.cont);
                                nd.setPrimeros(prim_ult((Nodo)b, nd1, ".", "primero"));
                                nd.setUltimos(prim_ult((Nodo)b, nd1, ".", "ultimo"));
                                parser.cont++;
                                nd.AddHijos((Nodo) b);
                                nd.AddHijos(nd1);
                                parser.padre = (Nodo) nd;
                                miER.add(new ExpresionRegular(a, nd, nhojas));
                                cont = 1;
                                nhojas = new LinkedList<Nhojas>();
                                
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ER",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SIM_SEPARACION ::= simSeparacion simSeparacion 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("SIM_SEPARACION",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LEXEMA ::= str 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("LEXEMA",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LEXEMA ::= entero 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("LEXEMA",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LEXEMA ::= decimal 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("LEXEMA",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LEXEMA ::= id 
            {
              String RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("LEXEMA",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PREO ::= punto PREO PREO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		
                                Nodo nd = new Nodo();
                                nd.setRaiz(".");
                                nd.setIdN(parser.cont);
                                nd.setAnulables(AN((Nodo)b, (Nodo)c, "."));
                                nd.setPrimeros(prim_ult((Nodo)b, (Nodo)c, ".", "primero"));
                                nd.setUltimos(prim_ult((Nodo)b, (Nodo)c, ".", "ultimo"));
                                parser.cont++;
                                nd.AddHijos((Nodo) b);
                                nd.AddHijos((Nodo) c);
                                RESULT = nd;
                                
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PREO",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PREO ::= barra PREO PREO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		
                            Nodo nd = new Nodo();
                            nd.setRaiz("|");
                            nd.setIdN(parser.cont);
                            nd.setAnulables(AN((Nodo)b, (Nodo)c, "|"));
                            nd.setPrimeros(prim_ult((Nodo)b, (Nodo)c, "|", "primero"));
                            nd.setUltimos(prim_ult((Nodo)b, (Nodo)c, "|", "ultimo"));
                            parser.cont++;
                            nd.AddHijos((Nodo) b);
                            nd.AddHijos((Nodo) c);
                            RESULT = nd;
                            
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PREO",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PREO ::= por PREO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		
                            Nodo nd = new Nodo();
                            Nodo hijo = (Nodo) b;
                            nd.setRaiz("*");
                            nd.setAnulables("A");
                            nd.setIdN(parser.cont);
                            nd.setPrimeros(hijo.primeros);
                            nd.setUltimos(hijo.ultimos);
                            parser.cont++;
                            nd.AddHijos((Nodo) b);
                            RESULT = nd;
                            
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PREO",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PREO ::= mas PREO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		
                            Nodo nd = new Nodo();
                            nd.setRaiz("+");
                            nd.setIdN(parser.cont);
                            Nodo hijo = (Nodo) b;
                            nd.setAnulables(hijo.anulables);
                            nd.setPrimeros(hijo.primeros);
                            nd.setUltimos(hijo.ultimos);
                            parser.cont++;
                            nd.AddHijos((Nodo) b);
                            RESULT = nd;
                            
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PREO",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PREO ::= interroga PREO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		
                            Nodo nd = new Nodo();
                            Nodo hijo = (Nodo) b;
                            nd.setRaiz("?");
                            nd.setAnulables("A");
                            nd.setIdN(parser.cont);
                            nd.setPrimeros(hijo.primeros);
                            nd.setUltimos(hijo.ultimos);
                            parser.cont++;
                            nd.AddHijos((Nodo) b);
                            RESULT = nd;
                            
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PREO",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PREO ::= Allav PREO Cllav 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		  RESULT = a; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PREO",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PREO ::= corA PREO corC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		 RESULT = a; 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PREO",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PREO ::= letra 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		
                    Nodo nd = new Nodo();
                    nd.setRaiz("letra");
                    nd.setValor(a);
                    nd.setAnulables("N");
                    nd.setIdN(parser.cont);
                    nd.setPrimeros(""+(parser.cont));
                    nd.setUltimos(""+(parser.cont));
                    nhojas.add(new Nhojas(a, ""+(parser.cont), ""));
                    parser.cont++;
                    RESULT = nd;
                
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PREO",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PREO ::= digito 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		
                    Nodo nd = new Nodo();
                    nd.setRaiz("digito");
                    nd.setValor(a);
                    nd.setAnulables("N");
                    nd.setIdN(parser.cont);
                    nd.setPrimeros(""+(parser.cont));
                    nd.setUltimos(""+(parser.cont));
                    nhojas.add(new Nhojas(a, ""+(parser.cont), ""));
                    parser.cont++;
                    RESULT = nd;
                
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PREO",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PREO ::= entero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		
                    Nodo nd = new Nodo();
                    nd.setRaiz("numero");
                    nd.setValor(a);
                    nd.setAnulables("N");
                    nd.setIdN(parser.cont);
                    nd.setPrimeros(""+(parser.cont));
                    nd.setUltimos(""+(parser.cont));
                    nhojas.add(new Nhojas(a, ""+(parser.cont), ""));
                    parser.cont++;
                    RESULT = nd;
                
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PREO",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PREO ::= decimal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		
                    Nodo nd = new Nodo();
                    nd.setRaiz("decimal");
                    nd.setValor(a);
                    nd.setAnulables("N");
                    nd.setIdN(parser.cont);
                    nd.setPrimeros(""+(parser.cont));
                    nd.setUltimos(""+(parser.cont));
                    nhojas.add(new Nhojas(a, ""+(parser.cont), ""));
                    parser.cont++;
                    RESULT = nd;
                
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PREO",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PREO ::= especiales 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		
                    Nodo nd = new Nodo();
                    nd.setRaiz("especiales");
                    nd.setValor(a);
                    nd.setAnulables("N");
                    nd.setIdN(parser.cont);
                    nd.setPrimeros(""+(parser.cont));
                    nd.setUltimos(""+(parser.cont));
                    nhojas.add(new Nhojas(a, ""+(parser.cont), ""));
                    parser.cont++;
                    RESULT = nd;
                
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PREO",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PREO ::= id 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		
                    Nodo nd = new Nodo();
                    nd.setRaiz(a);
                    nd.setValor(a);
                    nd.setIdN(parser.cont);
                    nd.setAnulables("N");
                    nd.setPrimeros(""+(parser.cont));
                    nd.setUltimos(""+(parser.cont));
                    nhojas.add(new Nhojas(a, ""+(parser.cont), ""));
                    parser.cont++;
                    RESULT = nd;
                
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PREO",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PREO ::= str 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		
                    Nodo nd = new Nodo();
                    nd.setRaiz("simbolo");
                    nd.setValor(a);
                    nd.setIdN(parser.cont);
                    nd.setAnulables("N");
                    nd.setPrimeros(""+(parser.cont));
                    nd.setUltimos(""+(parser.cont));
                    nhojas.add(new Nhojas(a, ""+(parser.cont), ""));
                    parser.cont++;
                    RESULT = nd;
                
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("PREO",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analisis_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$analisis_sintactico$do_action_part00000000(
                               CUP$analisis_sintactico$act_num,
                               CUP$analisis_sintactico$parser,
                               CUP$analisis_sintactico$stack,
                               CUP$analisis_sintactico$top);
    }
}

}
