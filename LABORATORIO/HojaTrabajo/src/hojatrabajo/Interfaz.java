/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hojatrabajo;

import java.io.BufferedReader;
import java.io.StringReader;
import analizador.AnalizadorLexico;
import analizador.analisis_sintactico;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.LinkedList;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import objetos.Conjunto;
import objetos.Nodo;
import objetos.Nhojas;
import objetos.ExpresionRegular;

/**
 *
 * @author KUINN
 */
public class Interfaz extends javax.swing.JFrame {

    /**
     * Creates new form Interfaz
     */
    JFileChooser selectorArchivos = new JFileChooser();
    FileReader fr = null;
    BufferedReader bfr = null;
    File archivo = null;
    BufferedWriter bw;
    String guardar = "";
    int contador = 0;
    ImageIcon imgMostrar[];
    private static LinkedList<Nhojas> sinHijos;

    public Interfaz() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtEntrada = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtConsola = new javax.swing.JTextArea();
        btnAnalizar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtEntrada.setColumns(20);
        txtEntrada.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        txtEntrada.setRows(5);
        jScrollPane1.setViewportView(txtEntrada);

        txtConsola.setColumns(20);
        txtConsola.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        txtConsola.setRows(5);
        jScrollPane2.setViewportView(txtConsola);

        btnAnalizar.setText("analizar entrada");
        btnAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnAnalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 477, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 477, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAnalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarActionPerformed
        try {
            this.limpiar_memoria();
            this.analizar();
        } catch (Exception e) {
        }

    }//GEN-LAST:event_btnAnalizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnalizar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea txtConsola;
    private javax.swing.JTextArea txtEntrada;
    // End of variables declaration//GEN-END:variables

    public void analizar() throws Exception {
        String input = this.txtEntrada.getText();
        AnalizadorLexico lexico = new AnalizadorLexico(new BufferedReader(new StringReader(input)));
        analisis_sintactico sin = new analisis_sintactico(lexico);
        sin.parse();
        this.mostrarSalida(sin.salida);
    }

    public void mostrarSalida(String salida) {
        String salida2 = analisis_sintactico.errorSin;
        txtConsola.setText(salida);
    }

    private void limpiar_memoria() {
        analisis_sintactico.errorSin = "";

    }

    public static void Graficar(String cadena, String id, String nombre, String dir) {
        FileWriter fichero;
        File f;
        PrintWriter pw;
        String dirArchivo = dir + nombre;
        String archivo = dirArchivo + ".dot";
        try {
            f = new File(archivo);
            fichero = new FileWriter(f);
            pw = new PrintWriter(fichero);
            pw.println("digraph G { \n");
            pw.println(cadena);
            pw.println("label =" + "\"\n\n nombre: " + id + "\" ;" + "\n fontsize=20;");
            pw.println("\n }");
            fichero.close();
        } catch (Exception e) {
            System.out.println(e + "  crea archivo dot");
        }
        try {
            String cmd = "dot.exe -Tpng " + dirArchivo + ".dot -o " + dirArchivo + ".png";
            Runtime.getRuntime().exec(cmd);
        } catch (Exception e) {
            System.out.println(e + " crea archivo png");
        }
    }

    private static String[] miSplit(String cadena) {
        String[] caracter = cadena.split(", ");
        return caracter;
    }

 

    private void generar_tabla_siguiente(LinkedList<Nhojas> tablaNext, String id, String numero) {
        String cadena = "tbl [ \n shape=plaintext \n label=< \n <table border='0' cellborder='1'  cellspacing='0'> \n";
        cadena += "<tr><td>" + "Hoja" + "</td><td>" + "identificador" + "</td><td>" + "Siguientes" + "</td></tr> \n";
        for (int i = 0; i < tablaNext.size(); i++) {
            cadena += "<tr><td>" + tablaNext.get(i).getValor() + "</td><td>" + tablaNext.get(i).getId() + "</td><td>" + tablaNext.get(i).getSig() + "</td></tr> \n";
        }
        cadena += "</table> \n >];";
        String nombre = "tabNext" + numero;
        String dir = "C:\\Users\\KUINN\\Documents\\NetBeansProjects\\ExpresionesRegulares\\src\\siguientes\\";
        Graficar(cadena, id, nombre, dir);
    }

    private void abrir_archivo() {
        selectorArchivos.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("der", "der");
        selectorArchivos.setFileFilter(filter);
        // indica cual fue la accion de usuario sobre el jfilechooser
        int resultado = selectorArchivos.showOpenDialog(this);

        File archivoSe = selectorArchivos.getSelectedFile(); // obtiene el archivo seleccionado

        try {
            String uweb = new String();
            String path = archivoSe.getAbsolutePath();  //obtiene la direccion del archivo
            guardar = path;
            archivo = new File(path);

            try {
                fr = new FileReader(path);
                bfr = new BufferedReader(fr);
                while (bfr.ready()) {
                    uweb += bfr.readLine() + "\n";
                }
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                try {
                    if (null != fr) {
                        fr.close();
                        this.txtEntrada.setText(uweb);
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        } catch (Exception exp) {
            exp.printStackTrace();
        }

    }

    private void guardar_archivo() {
        //se crea una variable tipo File
        archivo = new File(guardar); //se inicializa la variable con el valor del metodo 

        try {
            FileWriter w = new FileWriter(archivo); //se inicializa la una variable de escritura de archivo
            BufferedWriter bw = new BufferedWriter(w);
            PrintWriter wr = new PrintWriter(bw);

            //Con nuestro PrintWriter ingresamos el texto que deseamos escribir
            wr.write(txtEntrada.getText());
            wr.close();
            bw.close();
        } catch (IOException e) {
            //JOptionPane.showMessageDialog(this, "error al guardar", "message", JOptionPane.ERROR_MESSAGE);
            int input = JOptionPane.showConfirmDialog(this,
                    "El archivo no se a creado, desea crear archivo!!", "Message",
                    JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
            if (input == 0) {
                this.nuevo_archivo();
            }
            // 0=ok, 2=cancel
        }
    }

    public void nuevo_archivo() {
        selectorArchivos.showSaveDialog(null);
        File archivoSe = selectorArchivos.getSelectedFile();

        if (archivoSe != null) {
            String path = archivoSe + ".der"; //path del archivo a guardar]
            archivo = new File(path);
            if (archivo.exists()) {
                JOptionPane.showMessageDialog(this, "ya existe el archivo", "message", JOptionPane.ERROR_MESSAGE);
            } else {
                try {
                    bw = new BufferedWriter(new FileWriter(archivo));
                    //txtEntrada.setText("");
                    JOptionPane.showMessageDialog(this, "Archivo creado con exito", "message", JOptionPane.INFORMATION_MESSAGE);
                    guardar = path;
                } catch (Exception e) {
                }
            }
        }

    }

}
